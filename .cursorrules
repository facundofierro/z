# Z Programming Language Project

## Project Overview

Z is a revolutionary "target-first" programming language that compiles to multiple platforms (Next.js, SwiftUI, Rust, Tauri, etc.) from a single codebase. The language is built on TSX/TypeScript syntax with extensions for multi-target development, AI-optimized context, and automatic scaffolding.

## 🏗️ Hybrid Monorepo Architecture

This is a **hybrid monorepo** supporting both Rust and TypeScript ecosystems:

```
z-lang/
├── 📦 Cargo.toml              # Rust workspace root
├── 📦 package.json            # TypeScript workspace root
├── 🔧 turbo.json              # Build orchestration
├── 📁 shared/                 # Shared assets (SINGLE SOURCE OF TRUTH)
│   ├── registry.json          # Language registry
│   └── grammar.pegjs          # PEG grammar definition
├── 📁 crates/                 # Rust packages (Cargo workspace)
│   ├── ast/                   # AST data structures
│   ├── parser/                # PEG-powered parser
│   ├── core/                  # Semantic analysis & code generation
│   └── cli/                   # Command-line interface
├── 📁 packages/               # TypeScript packages (pnpm workspace)
│   ├── language-server/       # @z-lang/language-server (LSP)
│   └── vscode-extension/      # @z-lang/vscode-extension
├── 📁 examples/               # Example Z programs
└── 📁 doc/                    # Documentation
```

### Core Components

- **Rust Compiler**: Multi-target code generation (`crates/`)
- **Language Server**: TypeScript LSP implementation (`packages/language-server/`)
- **VS Code Extension**: IDE integration (`packages/vscode-extension/`)
- **Shared Registry**: Single source of truth (`shared/registry.json`)
- **Examples**: Reference implementations (`examples/`)
- **Documentation**: Comprehensive specs and guides (`doc/`)

## Key Principles

### 1. Target-First Development

Code is organized into explicit compilation blocks that declare their intended output:

```z
next WebApp { ... }     // → Next.js application
swift MobileApp { ... }  // → iOS/macOS app
rust ComputeModule { ... } // → Native Rust or WebAssembly
```

### 2. Compiler Inheritance System

Child blocks inherit parent compilation context, creating cascading shared knowledge:

```z
@database(postgres)
next ECommerceApp {
  Schema { ... }    // Inherits TypeScript + PostgreSQL
  Routes { ... }    // Inherits all parent context + Schema types
}
```

### 3. AI-Optimized Context

Every module/function requires `@doc` and `@context` annotations for AI assistance and semantic understanding.

### 4. Zero-Config Scaffolding

Automatic file generation based on registry-defined rules:

- **Single-type children**: No type keywords required (`Routes { home, admin }`)
- **Multi-type children**: Requires type keywords (`Schema { table User {...}, enum Status {...} }`)
- **500-line limit**: Auto-splitting for maintainability

## Development Guidelines

### User Rules (Critical)

- **Use pnpm instead of npm** - Always use `pnpm` for package management
- **Use shadcn components and tailwind** - Prefer shadcn/ui components with Tailwind CSS
- **Use context7 when using shadcn components** - Leverage context7 for component documentation
- **Verify current directory** - Always check working directory before executing console commands

### Development Commands (Hybrid Monorepo)

#### 🔨 Build Commands

```bash
# Build everything (Rust + TypeScript)
pnpm build

# Build specific ecosystems
pnpm build:rust              # Cargo build --release
pnpm build:ts                # Build packages with Turborepo

# Development builds
pnpm dev                     # Start all development servers
pnpm dev:rust                # Cargo watch for development
```

#### 🧪 Testing Commands

```bash
# Test everything
pnpm test

# Test specific ecosystems
pnpm test:rust               # Cargo test --workspace
pnpm test:ts                 # Test TypeScript packages
```

#### 🧹 Code Quality

```bash
# Lint and format everything
pnpm lint                    # Lint all code
pnpm lint:rust               # Clippy for Rust
pnpm format                  # Format all code (rustfmt + prettier)
pnpm typecheck               # TypeScript type checking
```

#### 🛠️ Utility Commands

```bash
# Try the compiler
pnpm compile:example examples/hello.z

# Package VS Code extension
pnpm package:extension

# Clean everything
pnpm clean                   # Clean all build artifacts
```

### File Structure Patterns

#### Project Structure

```
project/
├── main.z                 # Entry point with target blocks
├── app/routes/            # Generated Next.js routes (.route.z)
├── app/components/        # React components (.component.z)
├── schema/               # Database models (.table.z, .model.z, .enum.z)
├── src/                  # Native code (Rust, Swift)
└── out/                  # Compiled outputs per target
```

#### File Extensions & Modes

- **`.z` files**: Z language source
- **Parse modes**: `code` (TypeScript-like) vs `markup` (Z-specific syntax)
- **Auto-detection**: Target keywords (`next`, `swift`, `rust`) trigger Z markup mode
- **Generated files**: Use target-specific extensions (`.ts`, `.rs`, `.swift`)

## Component Architecture

### Rust Components (`crates/`)

| Crate        | Purpose                               | Path             |
| ------------ | ------------------------------------- | ---------------- |
| **z-ast**    | Core AST data structures (zero logic) | `crates/ast/`    |
| **z-parser** | PEG-powered parser (source → AST)     | `crates/parser/` |
| **z-core**   | Semantic analysis & code generation   | `crates/core/`   |
| **z-cli**    | Command-line interface                | `crates/cli/`    |

#### Development Patterns

```bash
# Rust development (from root)
cargo check                  # Quick check
cargo build --release       # Production build
cargo test --workspace      # Run all tests
cargo watch -x "run -p z-cli -- examples/hello.z"  # Watch mode

# Grammar changes
# 1. Update shared/grammar.pegjs
# 2. Rebuild parser crate
# 3. Update crates/ast/ if needed
# 4. Test with cargo test --workspace
```

### TypeScript Components (`packages/`)

| Package                      | Purpose            | Path                         |
| ---------------------------- | ------------------ | ---------------------------- |
| **@z-lang/language-server**  | LSP implementation | `packages/language-server/`  |
| **@z-lang/vscode-extension** | VS Code extension  | `packages/vscode-extension/` |

#### Core Language Server Components

- **`z-lsp-server.ts`**: Main LSP server extending TypeScript LSP
- **`z-registry.ts`**: Registry-driven scaffolding configuration (reads `shared/registry.json`)
- **`scaffolding-commands.ts`**: Auto-file generation based on block structure
- **`z-validation.ts`**: Z language syntax validation

#### Development Patterns

```bash
# Language server development (from root)
cd packages/language-server
pnpm dev                     # Watch mode

# VS Code extension development
cd packages/vscode-extension
pnpm compile                 # Build extension
pnpm package                 # Create .vsix

# Or use unified commands (from root)
pnpm build:ts                # Build all TypeScript packages
pnpm dev                     # Start all dev servers
```

## Shared Registry System (`shared/registry.json`)

### Single Source of Truth

The `shared/registry.json` file is accessed by **both** Rust and TypeScript components:

- **Rust compiler**: Reads via `include_str!("../../../shared/registry.json")`
- **Language server**: Reads via file system with fallback paths
- **No duplication**: Eliminated old `embedded-registry.json`

### Registry Structure

```json
{
  "version": "0.1.0",
  "targets": { ... },           // Target definitions (next, swift, rust, etc.)
  "namespaces": { ... },        // Namespace definitions (Routes, Components, etc.)
  "childTypes": { ... },        // Child type definitions (route, component, etc.)
  "annotations": { ... }        // Annotation definitions (@doc, @context, etc.)
}
```

### Scaffolding System

- **Registry-driven**: Behavior defined in `shared/registry.json`
- **Namespace types**: Routes, API, Components, Schema, App, etc.
- **Child modes**: `single` (all same type) vs `multiple` (mixed types)
- **Auto-generation**: Creates files when new children detected in parent blocks

## Target-Specific Knowledge

### Next.js Target (`next`)

- **Namespaces**: Routes, API, Components, Schema
- **File generation**: Pages in `app/`, API routes in `app/api/`
- **Dependencies**: React 18+, TypeScript 5+, Tailwind CSS
- **ORM support**: Drizzle (preferred), Prisma

### Swift Target (`swift`)

- **Namespaces**: App, Components
- **Framework**: SwiftUI
- **File generation**: `.swift` files with SwiftUI structure

### Rust Target (`rust`)

- **Modes**: Native binary or WebAssembly
- **Namespaces**: type, fun, mod
- **Cargo integration**: Automatic `Cargo.toml` generation

### Multi-Target Patterns

- **Workspace blocks**: Organize multiple related applications
- **Shared types**: Cross-platform type definitions
- **Registry lookups**: Use `getNamespaceInfo()` for target-specific behavior

## Testing & Validation

### Test Files

- **Compiler tests**: `crates/*/tests/`
- **Language server tests**: `packages/language-server/src/*.test.ts`
- **Example validation**: `examples/*.z` files
- **Invalid syntax**: `test-invalid.z` files

### Validation Patterns

- **Z markup validation**: For target block files
- **TypeScript validation**: For code-mode files
- **Registry validation**: Ensure namespace/child type compatibility

## Common Development Tasks

### Adding New Target Support

1. **Update Registry**: Add target definition in `shared/registry.json`
2. **Rust Compiler**: Implement `TargetCompiler` trait in `crates/core/src/compilers/`
3. **Language Server**: Registry changes are automatically picked up
4. **VS Code Extension**: Add syntax highlighting if needed

### Modifying the Grammar

1. **Edit Grammar**: Update `shared/grammar.pegjs`
2. **Regenerate Parser**: Build the parser crate
3. **Update AST**: Modify `crates/ast/` if needed
4. **Test**: Run compiler tests

### Registry Changes

1. **Edit**: `shared/registry.json`
2. **Test Rust**: `cargo test --workspace`
3. **Test TypeScript**: `pnpm test:ts`
4. **Restart LSP**: In VS Code for immediate effect

### Development Workflow

```bash
# Full development workflow (from root)
pnpm install                 # Install TypeScript dependencies
cargo build --release       # Build Rust components
pnpm build:ts               # Build TypeScript components

# Development mode
pnpm dev                    # Start all development servers
# OR run separately:
pnpm dev:rust               # Cargo watch
cd packages/language-server && pnpm dev  # LSP watch mode

# Before committing
pnpm lint                   # Lint everything
pnpm test                   # Test everything
pnpm build                  # Build everything
```

## Troubleshooting

### Common Issues

1. **Scaffolding failures**: Check `shared/registry.json` configuration
2. **Parse errors**: Verify Z markup vs TypeScript mode detection
3. **Type conflicts**: Ensure proper inheritance chain
4. **Missing dependencies**: Run `pnpm install` (for TypeScript) or verify Cargo.toml
5. **Registry not found**: Ensure `shared/registry.json` exists and is valid JSON

### Debug Strategies

- **LSP issues**: Check language server output in VS Code
- **Parser debugging**: Use compiler test cases in `crates/*/tests/`
- **Scaffolding issues**: Verify `shared/registry.json` configuration
- **Build issues**: Use `cargo check` for Rust, `pnpm typecheck` for TypeScript
- **Registry issues**: Both ecosystems read the same `shared/registry.json`

### Path Debugging

**Important**: The monorepo structure means paths are relative to workspace roots:

- **Rust**: Workspace root is project root (has `Cargo.toml`)
- **TypeScript**: Workspace root is project root (has `package.json`)
- **Language Server**: Runs from `packages/language-server/` but reads registry from `../../shared/registry.json`

## AI Context Integration

### Required Annotations

- **`@doc`**: Human-readable description
- **`@context`**: AI-specific usage context
- **Function params**: `@params(name: type)`
- **Function returns**: `@response(type)`

### Context Hierarchy

- Module-level context flows to functions
- Parent block context inherits to children
- Annotations compose for rich semantic understanding

## Performance Considerations

### Build Optimization

- **Turborepo**: Coordinates builds across both ecosystems
- **Rust builds**: Use native Cargo for performance
- **TypeScript builds**: Use Rollup/TypeScript
- **Caching**: Optimizes repeated builds
- **Dependencies**: Properly tracked across languages

### File Organization

- **500-line limit**: Auto-split large files
- **Directory nesting**: Based on namespace configuration
- **Parse mode selection**: Optimize for content type

---

_Z Language: "One syntax, any target - with AI whispering context into every compilation."_

**Hybrid Monorepo** | [GitHub](https://github.com/facundofierro/z-lang) | [Documentation](./doc/)
